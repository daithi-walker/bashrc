
###########################################################################
### PS extensions
###
### Got this from somewhere on the internet I no longer recall...
### Basically, it sets a load PS and some colours and symbols to help with git
###########################################################################

function parse_git_branch {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1) /'
}

function parse_current_commit {
  git rev-parse --short HEAD --no-color 2> /dev/null | sed -e 's/.*/[&]/'
}

function git_unadded_new {
  if git rev-parse --is-inside-work-tree &> /dev/null; then
    if [[ -z $(git ls-files --other --exclude-standard 2> /dev/null) ]]; then
      echo ""
    else
      echo "[] "
    fi
  fi
}

function git_needs_commit {
  if [[ "git rev-parse --is-inside-work-tree &> /dev/null)" != 'true' ]] && git rev-parse --quiet --verify HEAD &> /dev/null; then
    # Default: off - these are potentially expensive on big repositories
    git diff-index --cached --quiet --ignore-submodules HEAD 2> /dev/null
    (( $? && $? != 128 )) && echo "@  "
  fi
}

function git_modified_files {
  if [[ "git rev-parse --is-inside-work-tree &> /dev/null)" != 'true' ]] && git rev-parse --quiet --verify HEAD &> /dev/null; then
    # Default: off - these are potentially expensive on big repositories
    git diff --no-ext-diff --ignore-submodules --quiet --exit-code || echo "+ "
  fi
}

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi


function pgvim() {
  COMPREPLY=()
  local cur="${COMP_WORDS[COMP_CWORD]}"
  COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
  cd ~/phpprojects/"$@" && gvim ;
}

complete -F "pgvim" -o "default" "pgvim"

if [ `id -u` = 0 ]; then
  COLOUR="04;01;31m"
  PATH_COLOUR="04;01;31m"
  TIME_COLOUR="0;31m"
else
  COLOUR="01;32m"
  PATH_COLOUR="01;34m"
  TIME_COLOUR="0;33m"
fi

BOLD_RED="01;31m"
BOLD_GREEN="01;32m"
BOLD_BLUE="01;34m"

PS1='\[\033[$TIME_COLOUR\]$(date +%H:%M:%S)\[\033[00m\] ${debian_chroot:+($debian_chroot)}\[\033[$COLOUR\]\u\[\033[00m\]: \[\033[01;$PATH_COLOUR\]\w\[\033[00m\]\[\033[01;35m\] $(parse_git_branch)$(parse_current_commit) \[\033[00m\]\[\033[$BOLD_RED\]$(git_unadded_new)\[\033[00m\]\[\033[$BOLD_GREEN\]$(git_needs_commit)\[\033[00m\]\[\033[$BOLD_BLUE\]$(git_modified_files)\[\033[00m\] '$'\n$ '

#if [ "$color_prompt" = yes ]; then
#    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
#else
#    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
#fi
unset color_prompt force_color_prompt

# Custom: turn off suspend/resume terminal functionality
stty -ixon

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac
